1、http://icanfly.iteye.com/blog/778401
   spring mvc 事务注解配置失效：因为spring的context是父子容器，所以会产生冲突，由ServletContextListener产生的是父容器，springMVC产生的是子容器，子容器Controller进行扫描装配时装配了@Service注解的实例，而该实例理应由父容器进行初始化以保证事务的增强处理，所以此时得到的将是原样的Service（没有经过事务加强处理，故而没有事务处理能力。 

还有一种方式是将service层改用xml配置,其实这样做也是变相的让springmvc无法扫描service，而只能依赖父窗口也就是ServletContextListener来进行初始化，这样同样被赋予了事务性。


2、注解事务必须配置在public 修饰的方法上才会起作用；

3、@Transactional 可以作用于接口、接口方法、类以及类方法上。当作用于类上时，该类的所有 public 方法将都具有该类型的事务属性，同时，我们也可以在方法级别使用该标注来覆盖类级别的定义。

   虽然 @Transactional 注解可以作用于接口、接口方法、类以及类方法上，但是 Spring 建议不要在接口或者接口方法上使用该注解，因为这只有在使用基于接口的代理时它才会生效。另外， @Transactional 注解应该只被应用到 public 方法上，这是由 Spring AOP 的本质决定的。如果你在 protected、private 或者默认可见性的方法上使用 @Transactional 注解，这将被忽略，也不会抛出任何异常。

   默认情况下，只有来自外部的方法调用才会被AOP代理捕获，也就是，类内部方法调用本类内部的其他方法并不会引起事务行为，即使被调用方法使用@Transactional注解进行修饰。
   
  
4、spring事务回滚规则
	指示spring事务管理器回滚一个事务的推荐方法是在当前事务的上下文内抛出异常。
	spring事务管理器会捕捉任何未处理的异常，然后依据规则决定是否回滚抛出异常的事务。

    默认配置下，spring只有在抛出的异常为运行时unchecked异常时才回滚该事务，
	也就是抛出的异常为RuntimeException的子类(Errors也会导致事务回滚)，而抛出checked异常则不会导致事务回滚。
	可以明确的配置在抛出那些异常时回滚事务，包括checked异常。也可以明确定义那些异常抛出时不回滚事务。
	还可以编程性的通过setRollbackOnly()方法来指示一个事务必须回滚，
	在调用完setRollbackOnly()后你所能执行的唯一操作就是回滚。
	
	
	
注意事项：http://blog.csdn.net/bao19901210/article/details/41724355	
	